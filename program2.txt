AND R3 0 # Loop 0-29
AND R4 0 # Loop 30-59
ADD R4 R1 # 0000 0001 = 1
SLL R4 1 # 0000 0010 = 2
ADD R4 R1 # 0000 0011 = 3
SLL R4 1 # 0000 0110 = 6
ADD R4 R1 # 0000 0111 = 7
SLL R4 1 # 0000 1110 = 14
ADD R4 R1 # 0000 1111 = 15
SLL R4 1 # 0001 111 0 = 30

AND R0 0
AND R2 0
AND R5 0
AND R6 0
AND R7 0

----- calculate p8 -----
LW R4 1
SLL R2 1 # b11
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 2 # b10
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 3 # b9
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 4 # b8
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 5 # b7
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 6 # b6
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 7 # b5
AND R2 1
XOR R0 R2

ADD R5 R0 # 0 0 0 0 0 0 0 p8
SLL R5 1  # 0 0 0 0 0 0 p8 0

----- calculate p4 -----
AND R0 0

LW R4 1 
SLL R2 1 # b11
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 2 # b10
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 3 # b9
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 4 # b8
AND R2 1
XOR R0 R2

LW R4 0 
SLL R2 1 # b4
AND R2 1
XOR R0 R2

LW R4 0 
SLL R2 2 # b3
AND R2 1
XOR R0 R2

LW R4 0 
SLL R2 3 # b2
AND R2 1
XOR R0 R2

ADD R5 R0 # 0 0 0 0 0 0 p8 p4
SLL R5 1  # 0 0 0 0 0 p8 p4 0

----- calculate p2 -----
AND R0 0

LW R4 1 
SLL R2 1 # b11
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 2 # b10
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 5 # b7
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 6 # b6
AND R2 1
XOR R0 R2

LW R4 0 
SLL R2 1 # b4
AND R2 1
XOR R0 R2

LW R4 0 
SLL R2 2 # b3
AND R2 1
XOR R0 R2

LW R4 0 
SLL R2 5 # b1
AND R2 1
XOR R0 R2

ADD R5 R0 # 0 0 0 0 0 p8 p4 p2
SLL R5 1  # 0 0 0 0 p8 p4 p2 0

----- calculate p1 -----
AND R0 0

LW R4 1 
SLL R2 1 # b11
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 3 # b9
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 5 # b7
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 7 # b5
AND R2 1
XOR R0 R2

LW R4 0 
SLL R2 1 # b4
AND R2 1
XOR R0 R2

LW R4 0 
SLL R2 3 # b2
AND R2 1
XOR R0 R2

LW R4 0 
SLL R2 5 # b1
AND R2 1
XOR R0 R2

ADD R5 R0 # 0 0 0 0 p8 p4 p2 p1
SLL R5 1  # 0 0 0 p8 p4 p2 p1 0

----- calculate p0 -----
AND R0 0

LW R4 1
SLL R2 1 # b11
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 2 # b10
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 3 # b9
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 4 # b8
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 5 # b7
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 6 # b6
AND R2 1
XOR R0 R2

LW R4 1
SLL R2 7 # b5
AND R2 1
XOR R0 R2

LW R4 1
AND R2 1 # p8
XOR R0 R2

LW R4 0 
SLL R2 1 # b4
AND R2 1
XOR R0 R2

LW R4 0 
SLL R2 2 # b3
AND R2 1
XOR R0 R2

LW R4 0 
SLL R2 3 # b2
AND R2 1
XOR R0 R2

LW R4 0
SLL R2 4 # p4
AND R2 1
XOR R0 R2

LW R4 0 
SLL R2 5 # b1
AND R2 1
XOR R0 R2

LW R4 0 
SLL R2 6 # p2
AND R2 1
XOR R0 R2

LW R4 0 
SLL R2 7 # p1
AND R2 1
XOR R0 R2

ADD R5 R0 # 0 0 0 p8 p4 p2 p1 p0
AND R2 0
ADD R2 R5 # move parities to R2

# create 60 for storing q8q4q2q1q0
AND R0 0
ADD R0 R1 # 0000 0001 = 1
SLL R0 1 # 0000 0010 = 2
ADD R0 R1 # 0000 0011 = 3
SLL R0 1 # 0000 0110 = 6
ADD R0 R1 # 0000 0111 = 7
SLL R0 1 # 0000 1110 = 14
ADD R0 R1 # 0000 1111 = 15
SLL R0 2 # 0011 1100 = 60

SW R0 0 # put parities in mem[60]

----- calculate p8p4p2p1p0 -----
AND R5 0

LW R4 1
AND R2 1 # p8
ADD R5 R2
SLL R5 1 # 0 0 0 0 0 0 p8 0

LW R4 0
SLL R2 4 # p4
AND R2 1
ADD R5 R2
SLL R5 1 # 0 0 0 0 0 p8 p4 0

LW R4 0
SLL R2 6 # p2
AND R2 1
ADD R5 R2
SLL R5 1 # 0 0 0 0 p8 p4 p2 0

LW R4 0
SLL R2 7 # p1
AND R2 1
ADD R5 R2
SLL R5 1 # 0 0 0 p8 p4 p2 p1 0

LW R4 0
AND R2 1 # p0
ADD R5 R2 # 0 0 0 p8 p4 p2 p1 p0

LW R0 0 # R0 BETTER STILL BE 60!, get mem[60]
XOR R5 R2 # P^Q


AND R6 0 # to store F1F0

AND R7 0
ADD R7 R5
SLL R7 7
AND R7 1

OR R6 R7 # or S1

AND R7 0
ADD R7 R5
SLL R7 6
AND R7 1

OR R6 R7 # or S2

AND R7 0
ADD R7 R5
SLL R7 5
AND R7 1

OR R6 R7 # or S4

AND R7 0
ADD R7 R5
SLL R7 4
AND R7 1

OR R6 R7 # or S8


AND R7 0
ADD R7 R5
AND R7 1


OR R6 R7
XOR R6 R7
SLL R6 1
ADD R6 R7
SLL R6 6 # contains F1 F0 0 0 0 0 0 0

AND R2 0
ADD R2 R6
SW R0 1  # temp store in mem[61] to free up R6


----- data bit flip calculations -----
SLL R5 7 # 0 0 0 0 s8 s4 s2 s1 this is some number 0-15

# case statements: skip 0, 1, 2, 4, 8 because these are parities
# R7 will contain the comparison values that we create
# R6 will keep track of OR operations on digits

# case 3:
LW R4 0
AND R6 0
AND R7 0

ADD R7 R1 # 0000_0001
SLL R7 1  # 0000_0010
ADD R7 R1 # 0000_0011

AND R0 0
ADD R0 R5
XOR R0 R7 
AND R0 1  # s1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 7  # s2 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 6  # s4 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 5  # s8 
AND R0 1
OR R6 R0

XOR R6 R1 # invert whatever the result of the OR operations was
SLL R6 3
XOR R2 R6
SW R4 0
-----------------------------
# case 5:
LW R4 0
AND R6 0
AND R7 0

ADD R7 R1 # 0000_0001
SLL R7 2  # 0000_0100
ADD R7 R1 # 0000_0101

AND R0 0
ADD R0 R5
XOR R0 R7 
AND R0 1  # s1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 7  # s2 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 6  # s4 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 5  # s8 
AND R0 1
OR R6 R0

XOR R6 R1 # invert whatever the result of the OR operations was
SLL R6 5
XOR R2 R6
SW R4 0
-----------------------------
# case 6:
LW R4 0
AND R6 0
AND R7 0

ADD R7 R1 # 0000_0001
SLL R7 1  # 0000_0010
ADD R7 R1 # 0000_0011
SLL R7 1  # 0000_0110

AND R0 0
ADD R0 R5
XOR R0 R7 
AND R0 1  # s1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 7  # s2 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 6  # s4 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 5  # s8 
AND R0 1
OR R6 R0

XOR R6 R1 # invert whatever the result of the OR operations was
SLL R6 6
XOR R2 R6
SW R4 0
-----------------------------
# case 7:
LW R4 0
AND R6 0
AND R7 0

ADD R7 R1 # 0000_0001
SLL R7 1  # 0000_0010
ADD R7 R1 # 0000_0011
SLL R7 1  # 0000_0110
ADD R7 R1 # 0000_0111

AND R0 0
ADD R0 R5
XOR R0 R7 
AND R0 1  # s1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 7  # s2 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 6  # s4 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 5  # s8 
AND R0 1
OR R6 R0

XOR R6 R1 # invert whatever the result of the OR operations was
SLL R6 7
XOR R2 R6
SW R4 0
-----------------------------
# case 9:
LW R4 1
AND R6 0
AND R7 0

ADD R7 R1 # 0000_0001
SLL R7 3  # 0000_1000
ADD R7 R1 # 0000_1001

AND R0 0
ADD R0 R5
XOR R0 R7 
AND R0 1  # s1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 7  # s2 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 6  # s4 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 5  # s8 
AND R0 1
OR R6 R0

XOR R6 R1 # invert whatever the result of the OR operations was
SLL R6 1
XOR R2 R6
SW R4 1
-----------------------------
# case 10:
LW R4 1
AND R6 0
AND R7 0

ADD R7 R1 # 0000_0001
SLL R7 2  # 0000_0100
ADD R7 R1 # 0000_0101
SLL R7 1  # 0000_1010

AND R0 0
ADD R0 R5
XOR R0 R7 
AND R0 1  # s1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 7  # s2 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 6  # s4 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 5  # s8 
AND R0 1
OR R6 R0

XOR R6 R1 # invert whatever the result of the OR operations was
SLL R6 2
XOR R2 R6
SW R4 1
-----------------------------
# case 11:
LW R4 1
AND R6 0
AND R7 0

ADD R7 R1 # 0000_0001
SLL R7 2  # 0000_0100
ADD R7 R1 # 0000_0101
SLL R7 1  # 0000_1010
ADD R7 1  # 0000_1011

AND R0 0
ADD R0 R5
XOR R0 R7 
AND R0 1  # s1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 7  # s2 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 6  # s4 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 5  # s8 
AND R0 1
OR R6 R0

XOR R6 R1 # invert whatever the result of the OR operations was
SLL R6 3
XOR R2 R6
SW R4 1
-----------------------------
# case 12:
LW R4 1
AND R6 0
AND R7 0

ADD R7 R1 # 0000_0001
SLL R7 1  # 0000_0010
ADD R7 R1 # 0000_0011
SLL R7 2  # 0000_1100

AND R0 0
ADD R0 R5
XOR R0 R7 
AND R0 1  # s1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 7  # s2 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 6  # s4 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 5  # s8 
AND R0 1
OR R6 R0

XOR R6 R1 # invert whatever the result of the OR operations was
SLL R6 4
XOR R2 R6
SW R4 1
-----------------------------
# case 13:
LW R4 1
AND R6 0
AND R7 0

ADD R7 R1 # 0000_0001
SLL R7 1  # 0000_0010
ADD R7 R1 # 0000_0011
SLL R7 2  # 0000_1100
ADD R7 1  # 0000_1101

AND R0 0
ADD R0 R5
XOR R0 R7 
AND R0 1  # s1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 7  # s2 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 6  # s4 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 5  # s8 
AND R0 1
OR R6 R0

XOR R6 R1 # invert whatever the result of the OR operations was
SLL R6 5
XOR R2 R6
SW R4 1
-----------------------------
# case 14:
LW R4 1
AND R6 0
AND R7 0

ADD R7 R1 # 0000_0001
SLL R7 1  # 0000_0010
ADD R7 R1 # 0000_0011
SLL R7 1  # 0000_0110
ADD R7 1  # 0000_0111
SLL R7 1  # 0000_1110

AND R0 0
ADD R0 R5
XOR R0 R7 
AND R0 1  # s1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 7  # s2 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 6  # s4 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 5  # s8 
AND R0 1
OR R6 R0

XOR R6 R1 # invert whatever the result of the OR operations was
SLL R6 6
XOR R2 R6
SW R4 1
-----------------------------
# case 15:
LW R4 1
AND R6 0
AND R7 0

ADD R7 R1 # 0000_0001
SLL R7 1  # 0000_0010
ADD R7 R1 # 0000_0011
SLL R7 1  # 0000_0110
ADD R7 R1 # 0000_0111
SLL R7 1  # 0000_1110
ADD R7 R1 # 0000_1111

AND R0 0
ADD R0 R5
XOR R0 R7 
AND R0 1  # s1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 7  # s2 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 6  # s4 
AND R0 1
OR R6 R0

AND R0 0
ADD R0 R5
XOR R0 R7
SLL R0 5  # s8 
AND R0 1
OR R6 R0

XOR R6 R1 # invert whatever the result of the OR operations was
SLL R6 7
XOR R2 R6
SW R4 1
--------------------------------------
# mem should now contain correct data

AND R0 0
ADD R0 R1 # 0000 0001 = 1
SLL R0 1 # 0000 0010 = 2
ADD R0 R1 # 0000 0011 = 3
SLL R0 1 # 0000 0110 = 6
ADD R0 R1 # 0000 0111 = 7
SLL R0 1 # 0000 1110 = 14
ADD R0 R1 # 0000 1111 = 15
SLL R0 2 # 0011 1100 = 60

LW R0 1 # load back F1 F0.... bits from mem[61]
AND R6 0
ADD R6 R2
LW R4 1 # load correct data b11:b5 p8
SLL R2 3
AND R2 7  # 0  0  0 0 0 b11 b10 b9
ADD R2 R6 # F1 F0 0 0 0 b11 b10 b9
SW R3 1

LW R4 1 
AND R6 0
ADD R6 R2 # b11 b10 b9 b8 b7 b6 b5 p8
SLL R6 6  # b5 p8 b11 b10 b9 b8 b7 b6
AND R6 7  # 0  0  0   0   0  b8 b7 b6
SLL R6 1  # 0  0  0   0   b8 b7 b6 0

LW R4 1
SLL R2 7  # p8 b11 b10 b9 b8 b7 b6 b5
AND R2 1  # 0  0   0   0  0  0  0  b5
ADD R6 R2 # 0  0  0   0   b8 b7 b6 b5
SLL R6 3  # 0  b8 b7  b6  b5 0  0  0

LW R4 0
SLL R2 3  # p4 b1 p2 p1 p0 b4 b3 b2
AND R2 7  # 0  0  0  0  0  b4 b3 b2
ADD R6 R2 # 0  b8 b7 b6 b5 b4 b3 b2
SLL R6 1  # b8 b7 b6 b5 b4 b3 b2 0

LW R4 0
SLL R2 5  # p2 p1 p0 b4 b3 b2 p4 b1 
AND R2 1  # 0  0  0  0  0  0  0  b1
ADD R2 R6 # b8 b7 b6 b5 b4 b3 b2 b1

SW R3 0

ADD R3 1
ADD R3 1
ADD R4 1
ADD R4 1

AND R6 0 # Loop 30-59
ADD R6 R1 # 0000 0001 = 1
SLL R6 1 # 0000 0010 = 2
ADD R6 R1 # 0000 0011 = 3
SLL R6 1 # 0000 0110 = 6
ADD R6 R1 # 0000 0111 = 7
SLL R6 1 # 0000 1110 = 14
ADD R6 R1 # 0000 1111 = 15
SLL R6 1 # 0001 111 0 = 30

AND R7 0
ADD R7 1
SLL R7 2
ADD R7 1
SLL R7 1

XOR R6 R3
BEZ R6 R7