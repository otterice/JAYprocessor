AND R0 0
AND R2 0
AND R5 0
ADD R5 R1
SLL R5 5 # R5 = 32
SW R5 2
AND R3 0
AND R6 0   <----- branch
AND R7 0




AND R2 0
ADD R2 R0



AND R5 0
ADD R5 R1
SLL R5 5 # R5 = 32

SW R5 4    # store in mem[36]

AND R2 0




AND R5 0
ADD R5 R1
SLL R5 5 # R5 = 32


LW R5 0
AND R4 0
ADD R4 R2 # R4 has pattern


--------- b0 b1 b2 b3 b4 X X X
LW R3 0
XOR R2 R4  # no shift necessary

AND R7 0

# b1 b2 b3 b4 X X X b0
SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6


XOR R7 R1
ADD R0 R7 # xor = 0 if same, flip (xor 1) then add
--------- b1 b2 b3 b4 b5 X X X
LW R3 0
SLL R2 1   # upper 5 bits are obtained through shifting now
XOR R2 R4 

AND R7 0

SLL R2 1 # b2 b3 b4 b5 X X X b1  
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6


XOR R7 R1
ADD R0 R7 # xor = 0 if same, flip (xor 1) then add
--------- b2 b3 b4 b5 b6 X X X
LW R3 0
SLL R2 2
XOR R2 R4 

AND R7 0

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6


XOR R7 R1
ADD R0 R7 # xor = 0 if same, flip (xor 1) then add
--------- b3 b4 b5 b6 b7 X X X
LW R3 0
SLL R2 3
XOR R2 R4 

AND R7 0

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6


XOR R7 R1
ADD R0 R7 # xor = 0 if same, flip (xor 1) then add





AND R5 0
ADD R5 R1
SLL R5 5 # R5 = 32

LW R5 4    # load mem[36]

XOR R2 R0
AND R5 0

AND R6 0
ADD R6 R2
AND R6 1
OR R5 R6

AND R6 0
ADD R6 R2
SLL R6 1
AND R6 1
OR R5 R6

AND R6 0
ADD R6 R2
SLL R6 2
AND R6 1
OR R5 R6

AND R6 0
ADD R6 R2
SLL R6 3
AND R6 1
OR R5 R6

AND R6 0
ADD R6 R2
SLL R6 4
AND R6 1
OR R5 R6

AND R6 0
ADD R6 R2
SLL R6 5
AND R6 1
OR R5 R6

AND R6 0
ADD R6 R2
SLL R6 6
AND R6 1
OR R5 R6

AND R6 0
ADD R6 R2
SLL R6 7
AND R6 1
OR R5 R6


AND R6 0
ADD R6 R5



AND R5 0
ADD R5 R1
SLL R5 5 # R5 = 32

LW R5 2    # get  mem[34]
ADD R2 R6

AND R5 0
ADD R5 R1
SLL R5 5 # R5 = 32

SW R5 2    # store  mem[34]








AND R5 0
ADD R5 R1
SLL R5 5 # R5 = 32


AND R2 0
ADD R2 R0

SW R5 1


ADD R3 R1 # mem index


AND R6 0
ADD R6 R1
ADD R6 R1
ADD R6 R1
ADD R6 R1
ADD R6 R1
ADD R6 R1
ADD R6 R1

XOR R5 R3 # mem index stops at 32
BEZ R5 R6



AND R0 0

AND R2 0
AND R3 0
AND R4 0
AND R5 0
AND R6 0
AND R7 0

# please branch here :)

AND R5 0
ADD R5 R1
SLL R5 1
ADD R5 R1
SLL R5 1
ADD R5 R1
SLL R5 1
ADD R5 R1
SLL R5 1
ADD R5 R1


LW R5 1
AND R4 0
ADD R4 R2  # r4 has pattern


----------------------------- b5 b6 b7 b8 b9
LW R3 0
AND R6 0
ADD R6 R2
SLL R6 1  # b2 b3 b4 b5 b6 b7 b8 b9 b1

AND R7 0
ADD R7 R6
AND R7 1

XOR R6 R7



LW R3 1
SLL R2 1
AND R2 1

ADD R2 R6
SLL R2 3


XOR R2 R4




AND R7 0

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6


XOR R7 R1
ADD R0 R7 # xor = 0 if same, flip (xor 1) then add


















----------------------------- b6 b7 b8 b9 b10
LW R3 0
AND R6 0
ADD R6 R2
SLL R6 2

AND R7 0
ADD R7 R6
AND R7 3

XOR R6 R7



LW R3 1
SLL R2 2
AND R2 3

ADD R2 R6
SLL R2 3







XOR R2 R4




AND R7 0

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6


XOR R7 R1
ADD R0 R7 # xor = 0 if same, flip (xor 1) then add










----------------------------- b7 b8 b9 b10 b11
LW R3 0
AND R6 0
ADD R6 R2
SLL R6 3

AND R7 0
ADD R7 R6
AND R7 7

XOR R6 R7



LW R3 1
SLL R2 3
AND R2 7

ADD R2 R6
SLL R2 3







XOR R2 R4




AND R7 0

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6


XOR R7 R1
ADD R0 R7 # xor = 0 if same, flip (xor 1) then add










----------------------------- b8 b9 b10 b11 b12
LW R3 1
AND R6 0
ADD R6 R2

AND R7 0
ADD R7 R6
AND R7 1

XOR R6 R7

LW R3 0
AND R2 1
ADD R2 R6
SLL R2 7







XOR R2 R4




AND R7 0

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6

SLL R2 1   
AND R6 0
ADD R6 R2  
AND R6 1
OR R7 R6


XOR R7 R1
ADD R0 R7 # xor = 0 if same, flip (xor 1) then add














AND R2 0
ADD R2 R0
SW R5 4






ADD R3 R1


AND R5 0
ADD R5 R1
SLL R5 1
ADD R5 R1
SLL R5 1
ADD R5 R1
SLL R5 1
ADD R5 R1
SLL R5 1
ADD R5 R1  # 31



# BRANCH TO 225!
AND R6 0
ADD R6 R1 # 0000_0001
SLL R6 1  # 0000_0010
ADD R6 R1 # 0000_0011
SLL R6 1  # 0000_0110
ADD R6 R1 # 0000_0111
SLL R6 5  # 1110_0000
ADD R6 R1 # 1110_0001


XOR R5 R3
BEZ R5 R6



AND R5 0
ADD R5 R1
SLL R5 5 # R5 = 32

LW R5 1

AND R6 0
ADD R6 R2

LW R5 3
ADD R2 R6

SW R5 3